{"version":3,"sources":["../src/app.js"],"names":["_","polyfill","require","register","Express","bodyParser","api","cors","methodOverride","errors","sanitizer","helmet","compression","process","env","INFURA_ID","INFURA_SECRET","Error","app","use","origin","credentials","options","json","limit","urlencoded","extended","listen","PORT","err","console","log","startJobs"],"mappings":"AAAA,OAAOA,CAAP,MAAc,OAAd;AACA,MAAMC,WAAWC,QAAQ,gBAAR,CAAjB;AACA,MAAMC,WAAWD,QAAQ,qBAAR,CAAjB;AACA,OAAOE,OAAP,MAAoB,SAApB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,aAAxB;;AAEA,IAAI,CAACC,QAAQC,GAAR,CAAYC,SAAb,IAA0B,CAACF,QAAQC,GAAR,CAAYE,aAA3C,EAA0D;AACxD,QAAM,IAAIC,KAAJ,CACJ,4DACA,mDAFI,CAAN;AAID;;AAED,MAAMC,MAAM,IAAId,OAAJ,EAAZ;;AAEAc,IAAIC,GAAJ,CAAQZ,KAAK;AACXa,UAAQ,IADG;AAEXC,eAAa;AAFF,CAAL,CAAR;AAIAH,IAAII,OAAJ,CAAY,GAAZ,EAAiBf,MAAjB;;AAEAW,IAAIC,GAAJ,CAAQd,WAAWkB,IAAX,CAAgB,EAACC,OAAM,KAAP,EAAhB,CAAR;AACAN,IAAIC,GAAJ,CAAQd,WAAWoB,UAAX,CAAsB,EAAED,OAAM,KAAR,EAAeE,UAAU,IAAzB,EAAtB,CAAR;AACAR,IAAIC,GAAJ,CAAQX,gBAAR;AACAU,IAAIC,GAAJ,CAAQT,WAAR;AACAQ,IAAIC,GAAJ,CAAQR,QAAR;AACAO,IAAIC,GAAJ,CAAQP,aAAR;AACAM,IAAIC,GAAJ,CAAQ,GAAR,EAAab,GAAb;;AAEAY,IAAIC,GAAJ,CAAQV,MAAR;;AAEAS,IAAIS,MAAJ,CAAWd,QAAQC,GAAR,CAAYc,IAAZ,IAAoB,IAA/B,EAAsCC,GAAD,IAAS;AAC5C,MAAI,CAACA,GAAL,EAAU;AACRC,YAAQC,GAAR,CAAa,8BAA6BlB,QAAQC,GAAR,CAAYc,IAAZ,IAAoB,IAAK,EAAnE;AACD;AACF,CAJD;;AAMAI;;AAEA,eAAed,GAAf","file":"app.js","sourcesContent":["import _ from './env'\nconst polyfill = require('babel-polyfill')\nconst register = require('babel-core/register')\nimport Express from 'express'\nimport bodyParser from 'body-parser'\nimport api from './routes'\nimport cors from 'cors'\nimport methodOverride from 'method-override'\nimport { errors } from 'celebrate'\nimport sanitizer from 'express-sanitizer'\nimport helmet from 'helmet'\nimport compression from 'compression'\n\nif (!process.env.INFURA_ID || !process.env.INFURA_SECRET) {\n  throw new Error(\n    'Please set your Infura ID and Secret in your .env file.'+\n    'Refer to the Setup section of the README for help'\n  )\n}\n\nconst app = new Express()\n\napp.use(cors({\n  origin: true,\n  credentials: true\n}))\napp.options('*', cors())\n\napp.use(bodyParser.json({limit:'2mb'}))\napp.use(bodyParser.urlencoded({ limit:'2mb', extended: true }));\napp.use(methodOverride())\napp.use(sanitizer())\napp.use(helmet())\napp.use(compression())\napp.use('/', api)\n\napp.use(errors)\n\napp.listen(process.env.PORT || 5000, (err) => {\n  if (!err) {\n    console.log(`Server is running on port: ${process.env.PORT || 5000}`)\n  }\n})\n\nstartJobs()\n\nexport default app\n"]}